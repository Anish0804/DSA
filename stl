#include<bits/stdc++.h> //header file for c++ stl
/*Stl is made up of containers,iterators,functions and algorithms*/
//PAIRS
pair<int,int> p={2,3};
cout<<p.first<<p.second;

pair<int,<int,int>> p={2,{3,4}};
cout<<p.first<<p.second.first<<p.second.second;

pair<int,int> arr[]={{2,3},{4,5},{6,6}};

cout<<arr[1].first<<arr[2].second;

//VECTORS
vector<int> v;
cout<<v[0]<<v[1];
v.push_back(5);
v.emplace_back(10);
/*Another way to iterate over the array is to use iterator to iterate over the vector array*/
vector<int>::iterator it=v.begin();

//One way to print all the elements in a vector
for(auto it:v)
cout<<it;

//another way to print all the elements present in a vector

for(vector<int>::iterator it=v.begin();it!=v.end();it++)
cout<<*it;

//inserting into vector

v.insert(v.begin()+1,20);

v.insert(v.begin()+1,2,10);

//erasing elements present in a vector

v.erase(v.begin()+2);
v.erase(v.begin()+2,v.begin()+4);

//swapping function to swap two vectors
v1.swap(v2);

//clearing all the elements present in the vector

v.clear();

//to check if the given vector is empty or not
cout<<v.empty();

/*if the vector is empty it returns a true else it returns a false*/


//List

/*Similar to vector except the elements can be pushed to front as well*/

list<int> ls;
ls.push_back(5);
ls.emplace_back(10);//emplace is faster cpmpared to push back

ls.push_front(20);
ls.emplace_front(30):

//Stack

stack<int> s;
s.push(10);
s.push(40);
s.pop();

//Set

set<int> st;
st.insert(1);
st.insert(4);
st.insert(2);
st.insert(6);
//set stores the element in sorted order and also stores unique elements only 

auto it=set.find(4);

//find returns an iterator back
//If the element is not present in the set then the pointer returns the st.end() ,ie it points to the element after the last element

st.erase(4);
 
